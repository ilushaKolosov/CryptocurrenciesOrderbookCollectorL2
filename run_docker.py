#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Docker —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏
"""

import asyncio
import logging
import sys
import time
import traceback
import psutil
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
logger.info("üöÄ –ó–∞–ø—É—Å–∫ run_docker.py...")
logger.info(f"Python version: {sys.version}")
logger.info(f"Working directory: {os.getcwd()}")
logger.info(f"Files in directory: {os.listdir('.')}")

def log_system_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        process = psutil.Process()
        memory_info = process.memory_info()
        
        logger.info("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        logger.info(f"   PID: {process.pid}")
        logger.info(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_info.rss / 1024 / 1024:.2f} MB")
        logger.info(f"   –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {memory_info.vms / 1024 / 1024:.2f} MB")
        logger.info(f"   CPU: {psutil.cpu_count()} —è–¥–µ—Ä")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        if os.path.exists('/proc/1/cgroup'):
            with open('/proc/1/cgroup', 'r') as f:
                cgroup_info = f.read()
                if 'docker' in cgroup_info:
                    logger.info("   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: Docker")
        
        # –õ–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏ –∏–∑ cgroup
        try:
            with open('/sys/fs/cgroup/memory/memory.limit_in_bytes', 'r') as f:
                memory_limit = int(f.read().strip())
                logger.info(f"   –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {memory_limit / 1024 / 1024:.2f} MB")
        except:
            pass
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Docker"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Binance Orderbook Collector –≤ Docker...")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Working directory: {sys.path[0]}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    log_system_info()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        from binance_orderbook_collector_v2 import BinanceOrderbookCollectorV2
        from feature_calculator import FeatureCalculator
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞...")
        collector = BinanceOrderbookCollectorV2()
        logger.info("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–∏—á–µ–π
        logger.info("üßÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ñ–∏—á–µ–π...")
        calculator = FeatureCalculator()
        logger.info("‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–∏—á–µ–π —Å–æ–∑–¥–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∏—á–µ–π...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        collector_task = asyncio.create_task(collector.start())
        calculator_task = asyncio.create_task(calculator.start())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –∑–∞–¥–∞—á
        await asyncio.gather(collector_task, calculator_task)
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)
    finally:
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    try:
        logger.info("üéØ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ run_docker.py")
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        sys.exit(1) 