import asyncio
import json
import websockets
import aiohttp
import logging
import psutil
import os
from datetime import datetime
from typing import Dict, List, Optional
from database import OrderbookEntry, SessionLocal, create_tables
from config import TOP_CRYPTO_SYMBOLS, BINANCE_WS_URL, BINANCE_REST_URL, ORDERBOOK_DEPTH, SAVE_INTERVAL
import time
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

create_tables()

class BinanceOrderbookCollectorV2:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä L2 orderbook —Å Binance"""
    
    def __init__(self):
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BinanceOrderbookCollectorV2...")
        self.websocket = None
        self.is_running = False
        self.orderbooks = {}  # –ö—ç—à —Ç–µ–∫—É—â–∏—Ö orderbook
        self.last_save_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        self.db = SessionLocal()
        self.last_memory_log = 0
        self.message_counter = 0  # –°—á–µ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info(f"üìä –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–±–æ—Ä–∞: {TOP_CRYPTO_SYMBOLS}")
        logger.info(f"üóÑÔ∏è –ì–ª—É–±–∏–Ω–∞ orderbook: {ORDERBOOK_DEPTH} —É—Ä–æ–≤–Ω–µ–π")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {SAVE_INTERVAL} —Å–µ–∫—É–Ω–¥")
        
    def log_memory_usage(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            process = psutil.Process()
            memory_info = process.memory_info()
            current_time = time.time()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if current_time - self.last_memory_log > 30:
                logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_info.rss / 1024 / 1024:.2f} MB")
                logger.info(f"üìä –†–∞–∑–º–µ—Ä –∫—ç—à–∞ orderbook: {len(self.orderbooks)} —Å–∏–º–≤–æ–ª–æ–≤")
                self.last_memory_log = current_time
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏: {e}")
        
    async def initialize_orderbooks(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è orderbook —á–µ—Ä–µ–∑ REST API"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è orderbook —á–µ—Ä–µ–∑ REST API...")
        
        async with aiohttp.ClientSession() as session:
            for symbol in TOP_CRYPTO_SYMBOLS:
                try:
                    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–∏–µ orderbook –¥–ª—è {symbol}...")
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π orderbook —Å 100 —É—Ä–æ–≤–Ω—è–º–∏
                    url = f"{BINANCE_REST_URL}/api/v3/depth"
                    params = {
                        'symbol': symbol,
                        'limit': ORDERBOOK_DEPTH
                    }
                    
                    async with session.get(url, params=params) as response:
                        if response.status == 200:
                            data = await response.json()
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                            bids = []
                            for bid in data['bids']:
                                bids.append({
                                    'price': float(bid[0]),
                                    'volume': float(bid[1])
                                })
                            
                            asks = []
                            for ask in data['asks']:
                                asks.append({
                                    'price': float(ask[0]),
                                    'volume': float(ask[1])
                                })
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            self.orderbooks[symbol] = {
                                'bids': bids,
                                'asks': asks,
                                'last_update_id': data['lastUpdateId'],
                                'last_save_time': time.time()
                            }
                            
                            # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                            await self.save_orderbook(symbol, bids, asks, data['lastUpdateId'])
                            
                            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω orderbook –¥–ª—è {symbol} ({len(bids)} bids, {len(asks)} asks)")
                            
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è orderbook –¥–ª—è {symbol}: {response.status}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {symbol}: {e}")
                
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    async def connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å 100 —É—Ä–æ–≤–Ω—è–º–∏"""
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å 100 —É—Ä–æ–≤–Ω—è–º–∏
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: symbol@depth@100ms
        streams = [f"{symbol.lower()}@depth@100ms" for symbol in TOP_CRYPTO_SYMBOLS]
        stream_url = f"{BINANCE_WS_URL}?streams={'/'.join(streams)}"
        
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {stream_url}")
        
        try:
            self.websocket = await websockets.connect(stream_url)
            logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket: {e}")
            return False
    
    async def process_orderbook_update(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è orderbook"""
        try:
            stream_data = data['data']
            symbol = stream_data['s']
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ WebSocket –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üì° WebSocket –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}:")
            logger.info(f"   Update ID: {stream_data['u']}")
            logger.info(f"   Bids –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(stream_data['b'])}")
            logger.info(f"   Asks –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(stream_data['a'])}")
            if stream_data['b']:
                logger.info(f"   –õ—É—á—à–∏–π bid: {stream_data['b'][0]}")
            if stream_data['a']:
                logger.info(f"   –õ—É—á—à–∏–π ask: {stream_data['a'][0]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if symbol not in TOP_CRYPTO_SYMBOLS:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π orderbook
            current_orderbook = self.orderbooks.get(symbol, {
                'bids': [],
                'asks': [],
                'last_update_id': 0,
                'last_save_time': time.time()
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if stream_data['u'] <= current_orderbook['last_update_id']:
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
            # –û–±–Ω–æ–≤–ª—è–µ–º bids
            for bid in stream_data['b']:
                price = float(bid[0])
                volume = float(bid[1])
                
                # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                updated = False
                for i, existing_bid in enumerate(current_orderbook['bids']):
                    if existing_bid['price'] == price:
                        if volume == 0:
                            current_orderbook['bids'].pop(i)
                        else:
                            existing_bid['volume'] = volume
                        updated = True
                        break
                
                if not updated and volume > 0:
                    current_orderbook['bids'].append({'price': price, 'volume': volume})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º asks
            for ask in stream_data['a']:
                price = float(ask[0])
                volume = float(ask[1])
                
                # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
                updated = False
                for i, existing_ask in enumerate(current_orderbook['asks']):
                    if existing_ask['price'] == price:
                        if volume == 0:
                            current_orderbook['asks'].pop(i)
                        else:
                            existing_ask['volume'] = volume
                        updated = True
                        break
                
                if not updated and volume > 0:
                    current_orderbook['asks'].append({'price': price, 'volume': volume})
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º bids (–ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã) –∏ asks (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã)
            current_orderbook['bids'].sort(key=lambda x: x['price'], reverse=True)
            current_orderbook['asks'].sort(key=lambda x: x['price'])
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –¥–æ 100 —É—Ä–æ–≤–Ω–µ–π
            current_orderbook['bids'] = current_orderbook['bids'][:ORDERBOOK_DEPTH]
            current_orderbook['asks'] = current_orderbook['asks'][:ORDERBOOK_DEPTH]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º last_update_id
            current_orderbook['last_update_id'] = stream_data['u']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π orderbook –≤ –∫—ç—à
            self.orderbooks[symbol] = current_orderbook
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            current_time = time.time()
            if current_time - current_orderbook.get('last_save_time', 0) >= SAVE_INTERVAL:
                await self.save_orderbook(
                    symbol, 
                    current_orderbook['bids'], 
                    current_orderbook['asks'], 
                    current_orderbook['last_update_id']
                )
                current_orderbook['last_save_time'] = current_time
                self.orderbooks[symbol] = current_orderbook
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è orderbook: {e}")
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    async def save_orderbook(self, symbol: str, bids: List[Dict], asks: List[Dict], last_update_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ orderbook –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            logger.info(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è {symbol}:")
            logger.info(f"   Bids: {len(bids)} —É—Ä–æ–≤–Ω–µ–π, –ª—É—á—à–∞—è —Ü–µ–Ω–∞: {bids[0]['price'] if bids else 'N/A'}")
            logger.info(f"   Asks: {len(asks)} —É—Ä–æ–≤–Ω–µ–π, –ª—É—á—à–∞—è —Ü–µ–Ω–∞: {asks[0]['price'] if asks else 'N/A'}")
            logger.info(f"   Last Update ID: {last_update_id}")
            
            entry = OrderbookEntry()
            entry.symbol = symbol
            entry.timestamp = datetime.utcnow()
            entry.set_bids(bids)
            entry.set_asks(asks)
            entry.last_update_id = last_update_id
            
            self.db.add(entry)
            self.db.commit()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω orderbook –¥–ª—è {symbol} ({len(bids)} bids, {len(asks)} asks)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            logger.error(f"   Symbol: {symbol}")
            logger.error(f"   Bids count: {len(bids)}")
            logger.error(f"   Asks count: {len(asks)}")
            self.db.rollback()
    
    async def listen_websocket(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üéß –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è WebSocket...")
        while self.is_running:
            try:
                if self.websocket is None:
                    logger.info("üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket...")
                    if not await self.connect_websocket():
                        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket, –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(5)
                        continue
                
                logger.info("üì° –û–∂–∏–¥–∞–Ω–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è WebSocket
                try:
                    message = await asyncio.wait_for(self.websocket.recv(), timeout=30.0)
                except asyncio.TimeoutError:
                    logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç WebSocket (30 —Å–µ–∫), –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    self.websocket = None
                    continue
                
                self.message_counter += 1
                logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_counter}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ 10-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                if self.message_counter % 10 == 0:
                    logger.info(f"üì° WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_counter}: {message[:200]}...")
                
                data = json.loads(message)
                
                await self.process_orderbook_update(data)
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
                self.log_memory_usage()
                
            except websockets.exceptions.ConnectionClosed:
                logger.warning("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                self.websocket = None
                await asyncio.sleep(5)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket: {e}")
                logger.error(f"Traceback: {traceback.format_exc()}")
                await asyncio.sleep(1)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Binance Orderbook Collector V2...")
        logger.info(f"üóÑÔ∏è –ì–ª—É–±–∏–Ω–∞ orderbook: {ORDERBOOK_DEPTH} —É—Ä–æ–≤–Ω–µ–π")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {SAVE_INTERVAL} —Å–µ–∫—É–Ω–¥")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        create_tables()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º orderbook
        await self.initialize_orderbooks()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
        self.is_running = True
        await self.listen_websocket()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞...")
        self.is_running = False
        
        if self.websocket:
            await self.websocket.close()
        
        if self.db:
            self.db.close()
        logger.info("‚úÖ –ö–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    collector = BinanceOrderbookCollectorV2()
    
    try:
        await collector.start()
    except KeyboardInterrupt:
        print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        await collector.stop()


if __name__ == "__main__":
    asyncio.run(main()) 